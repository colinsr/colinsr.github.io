<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Colin Detwiller&#39;s blog</title>
    <link>http://colin.detwiller.me/</link>
    <description>Recent content on Colin Detwiller&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Powered by [Hugo](http://gohugo.io).</copyright>
    <lastBuildDate>Mon, 12 Feb 2018 08:47:19 -0500</lastBuildDate>
    
	<atom:link href="http://colin.detwiller.me/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Fizzbuzz</title>
      <link>http://colin.detwiller.me/post/fizzbuzz/</link>
      <pubDate>Mon, 12 Feb 2018 08:47:19 -0500</pubDate>
      
      <guid>http://colin.detwiller.me/post/fizzbuzz/</guid>
      <description>Our next exercise is going to be Fizzbuzz. This is a pretty common exercise that&amp;rsquo;s pretty simple. Let&amp;rsquo;s get started!
Same like we always do, we&amp;rsquo;ll create a new directory from inside our exercises directory to hold our tests/code and create a couple files - index.js test.js.
mkdir fizzbuzz &amp;amp;&amp;amp; cd fizzbuzz/ touch index.js test.js  Using your mechanism of choice we&amp;rsquo;ll get the following content into your test.js file:</description>
    </item>
    
    <item>
      <title>Return Max Char</title>
      <link>http://colin.detwiller.me/post/return-max-char/</link>
      <pubDate>Sat, 10 Feb 2018 07:33:48 -0500</pubDate>
      
      <guid>http://colin.detwiller.me/post/return-max-char/</guid>
      <description>Today we&amp;rsquo;re going to be writing a function that will return the most frequent character that appears in a string. Given the string: &amp;ldquo;abcdd&amp;rdquo; we would get back &amp;ldquo;d&amp;rdquo; because that character appears twice whereas the other characters only appear once.
This function would work the same when working with numbers, which will be coming in as a string anyways.
We can create our new directory inside of our exercises directory as well as our two files, index.</description>
    </item>
    
    <item>
      <title>Javascript More String Exercises</title>
      <link>http://colin.detwiller.me/post/javascript-more-string-exercises/</link>
      <pubDate>Wed, 07 Feb 2018 08:58:34 -0500</pubDate>
      
      <guid>http://colin.detwiller.me/post/javascript-more-string-exercises/</guid>
      <description>Next up on our list of exercises is going to be two more simple functions.
First we&amp;rsquo;ll walk through how to implement a palindrome checker, and then we&amp;rsquo;ll cover reversing integers.
For the palindrome function, we&amp;rsquo;ll want to return true/false depending on whether or not a given string is a palindrome. For those of you who are not familiar with the term here is the definition:
a word, phrase, or sequence that reads the same backward as forward</description>
    </item>
    
    <item>
      <title>Javascript Reverse String</title>
      <link>http://colin.detwiller.me/post/javascript-reverse-string/</link>
      <pubDate>Sat, 03 Feb 2018 10:03:12 -0500</pubDate>
      
      <guid>http://colin.detwiller.me/post/javascript-reverse-string/</guid>
      <description>In an effort to learn the in&amp;rsquo;s and out&amp;rsquo;s of ES2017 I&amp;rsquo;m going to be working through some exercises.
The first exercise I&amp;rsquo;d like to work through is a pretty simple one, reversing a string with javascript.
Basically, given string &#39;foobar&#39; I&amp;rsquo;d like to return &#39;raboof&#39; - again, this is pretty simple and I think it would be a great place to start.
To start with, let&amp;rsquo;s go ahead and create a new directory in our terminal with:</description>
    </item>
    
    <item>
      <title>Azure Application Gatway - Part 2</title>
      <link>http://colin.detwiller.me/post/azureapplicationgatwaypart2/</link>
      <pubDate>Mon, 29 Jan 2018 10:43:42 -0500</pubDate>
      
      <guid>http://colin.detwiller.me/post/azureapplicationgatwaypart2/</guid>
      <description>This is a continuation from part one on setting up an Azure Application Gateway Part 1.
Next on our hit list is creating an Azure VNet to hold our AppGW. The AppGW has to live in an AppGW subnet, the only other thing that can reside in the same subnet are other AppGW&amp;rsquo;s and hopefully you&amp;rsquo;ll only need one since the AppGW is capable of serving up to 20 sites, with various limits around authentication certs for backend re-encryption.</description>
    </item>
    
    <item>
      <title>Azure Application Gatway - Part 1</title>
      <link>http://colin.detwiller.me/post/azureapplicationgatwaypart1/</link>
      <pubDate>Mon, 29 Jan 2018 10:43:38 -0500</pubDate>
      
      <guid>http://colin.detwiller.me/post/azureapplicationgatwaypart1/</guid>
      <description>This is going to be a chronicling of how to setup an Azure Application Gateway using a custom wildcard certificate (You should be thinking &amp;ldquo;*.foobar.com&amp;rdquo;).
The Background I&amp;rsquo;ve gone through some basic tutorials with the Azure Application Gateway (AppGW) in the past, but recently I encountered a scenario where a client needed me to setup an AppGW that could host 4 Azure Web Apps running an an Azure App Service Environment.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://colin.detwiller.me/about/</link>
      <pubDate>Mon, 29 Jan 2018 07:42:10 -0500</pubDate>
      
      <guid>http://colin.detwiller.me/about/</guid>
      <description>My name is Colin Detwiller.
I&amp;rsquo;m a passionate technologist and have been learning everything I can around software craftsmanship, cloud platforms, distributed systems, infrastructure/ops automation, and many more topics.
If any of these topics sound interesting to you than you&amp;rsquo;ve found the right place to come learn from all my mistakes.</description>
    </item>
    
  </channel>
</rss>