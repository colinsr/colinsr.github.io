<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Colin Detwiller&#39;s blog</title>
    <link>http://colin.detwiller.me/</link>
    <description>Recent content on Colin Detwiller&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Powered by [Hugo](http://gohugo.io).</copyright>
    <lastBuildDate>Mon, 19 Mar 2018 06:55:51 -0400</lastBuildDate>
    
	<atom:link href="http://colin.detwiller.me/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AWS VPC</title>
      <link>http://colin.detwiller.me/post/aws_vpc/</link>
      <pubDate>Mon, 19 Mar 2018 06:55:51 -0400</pubDate>
      
      <guid>http://colin.detwiller.me/post/aws_vpc/</guid>
      <description>In this post we&amp;rsquo;re going to dissect the make up of an AWS VPC.
VPC&amp;rsquo;s make up the networking component of Amazon Web Services. They&amp;rsquo;re composed of several distinct pieces, we&amp;rsquo;ll go over each one independently and talk about their purpose and some of the ins and outs of them.
 VPC Subnets Internet Gateway Route Tables Network Access Control Lists Security Groups Virtual Private Gatway VPC Endpoints  VPC  VPCs are the heart of AWS networking.</description>
    </item>
    
    <item>
      <title>AWS Identity &amp; Access Management</title>
      <link>http://colin.detwiller.me/post/aws_iam/</link>
      <pubDate>Sat, 17 Mar 2018 07:49:12 -0400</pubDate>
      
      <guid>http://colin.detwiller.me/post/aws_iam/</guid>
      <description>What is IAM?  IAM is AWS&amp;rsquo; way of tracking permissions across all the resources assiciated with a given AWS cloud subscription. IAM controls access at the user, group or role level - and also handles federation to give temporary permission to external users. Inside IAM you are able to customize the login URL for the specific AWS account. You can configure console password policies, enforce MFA across all accounts.</description>
    </item>
    
    <item>
      <title>Vowels</title>
      <link>http://colin.detwiller.me/post/vowels/</link>
      <pubDate>Fri, 02 Mar 2018 16:53:52 -0500</pubDate>
      
      <guid>http://colin.detwiller.me/post/vowels/</guid>
      <description>This exercise will be a walk in the park. We need to do a case insensitive count of vowel characters in a given string.
In this exercise we&amp;rsquo;ll try to use map(), filter(), and reduce().
This is going to be a fun one. Starting like we always do, go to our exercises/ directory and create our new directory, vowels/ and create two files index.js and test.js.
We&amp;rsquo;ll add some prebaked tests into the test.</description>
    </item>
    
    <item>
      <title>Pyramid</title>
      <link>http://colin.detwiller.me/post/pyramid/</link>
      <pubDate>Wed, 28 Feb 2018 08:21:12 -0500</pubDate>
      
      <guid>http://colin.detwiller.me/post/pyramid/</guid>
      <description>Building on our last exercise this time we&amp;rsquo;re going to be building a pyramid. Given a positive number print that number of lines printing out a pyramid shape:
pyramid(3) =&amp;gt; &#39; # &#39; &#39; ### &#39; &#39;#####&#39;  You should be able to see the similarities in the output - but the program will have to do a little more work to figure out if it needs to print a space or hashtag.</description>
    </item>
    
    <item>
      <title>Steps</title>
      <link>http://colin.detwiller.me/post/steps/</link>
      <pubDate>Sun, 25 Feb 2018 17:35:40 -0500</pubDate>
      
      <guid>http://colin.detwiller.me/post/steps/</guid>
      <description>Ok, next up on our list of exercises is going to be to create a steps(n) function.
This function will print out to the console a number of log statements like so:
steps(3) =&amp;gt; &#39;# &#39; &#39;## &#39; &#39;###&#39;  Meaning the base will print N &amp;ldquo;#&amp;rdquo; signs, and any steps above will have a single space to the right for each step up when given a positive number.
Following the same approach, we&amp;rsquo;ll navigate to our exercises/ directory and create a new directory called steps/, then we&amp;rsquo;ll jump into the directory and create our index.</description>
    </item>
    
    <item>
      <title>Capitalizer</title>
      <link>http://colin.detwiller.me/post/capitalizer/</link>
      <pubDate>Fri, 23 Feb 2018 07:29:30 -0500</pubDate>
      
      <guid>http://colin.detwiller.me/post/capitalizer/</guid>
      <description>This particular exercise should be a breeze after some of the exercises that we&amp;rsquo;ve already gone through.
Given a string, capitalize the first letter of each word in that string.
Once again, we have some setup to take care of - creating our directory and files.
mkdir capitalizer &amp;amp;&amp;amp; cd capitalizer/ &amp;amp;&amp;amp; touch index.js test.js
Then get some tests into our test.js file:
const capitalize = require(&#39;./index&#39;); test(&#39;Capitalize exists&#39;, () =&amp;gt; { expect(typeof capitalize).</description>
    </item>
    
    <item>
      <title>Anagram Check</title>
      <link>http://colin.detwiller.me/post/anagram-check/</link>
      <pubDate>Tue, 20 Feb 2018 19:41:08 -0500</pubDate>
      
      <guid>http://colin.detwiller.me/post/anagram-check/</guid>
      <description>It&amp;rsquo;s time to work through another (easy) exercise in javascript. This time we&amp;rsquo;ll be working through an anagram checker function.
Just so that we&amp;rsquo;re all on the same page I&amp;rsquo;ve taken the liberty of pulling up an official definition of &amp;ldquo;anagram&amp;rdquo;: &amp;gt; a word, phrase, or sentence formed from another by rearranging its letters: “Angel” is an anagram of “glean.”.
Pretty much what we are about to set out to do is see if the letters contained within the two string parameters match.</description>
    </item>
    
    <item>
      <title>Array Chunk</title>
      <link>http://colin.detwiller.me/post/array-chunk/</link>
      <pubDate>Thu, 15 Feb 2018 08:47:31 -0500</pubDate>
      
      <guid>http://colin.detwiller.me/post/array-chunk/</guid>
      <description>Today we&amp;rsquo;ll be working through an exercise where the input is an array [1,2,3,4,5] and a size 2.
Based on that input our goal is to write a function that will take the original array and return a new multidimensional (nested) array with the elements each of the size param that was passed in. It&amp;rsquo;ll probably be easier to understand based on this example:
chunk([1,2,3,4,5], 2) =&amp;gt; [ [1,2], [3,4], [5]]  This problem should be easier to reason about now that we&amp;rsquo;ve seen a example.</description>
    </item>
    
    <item>
      <title>Fizzbuzz</title>
      <link>http://colin.detwiller.me/post/fizzbuzz/</link>
      <pubDate>Mon, 12 Feb 2018 08:47:19 -0500</pubDate>
      
      <guid>http://colin.detwiller.me/post/fizzbuzz/</guid>
      <description>Our next exercise is going to be Fizzbuzz. This is a pretty common exercise that&amp;rsquo;s pretty simple. Let&amp;rsquo;s get started!
Same like we always do, we&amp;rsquo;ll create a new directory from inside our exercises directory to hold our tests/code and create a couple files - index.js test.js.
mkdir fizzbuzz &amp;amp;&amp;amp; cd fizzbuzz/ touch index.js test.js  Using your mechanism of choice we&amp;rsquo;ll get the following content into your test.js file:</description>
    </item>
    
    <item>
      <title>Return Max Char</title>
      <link>http://colin.detwiller.me/post/return-max-char/</link>
      <pubDate>Sat, 10 Feb 2018 07:33:48 -0500</pubDate>
      
      <guid>http://colin.detwiller.me/post/return-max-char/</guid>
      <description>Today we&amp;rsquo;re going to be writing a function that will return the most frequent character that appears in a string. Given the string: &amp;ldquo;abcdd&amp;rdquo; we would get back &amp;ldquo;d&amp;rdquo; because that character appears twice whereas the other characters only appear once.
This function would work the same when working with numbers, which will be coming in as a string anyways.
We can create our new directory inside of our exercises directory as well as our two files, index.</description>
    </item>
    
    <item>
      <title>Javascript More String Exercises</title>
      <link>http://colin.detwiller.me/post/javascript-more-string-exercises/</link>
      <pubDate>Wed, 07 Feb 2018 08:58:34 -0500</pubDate>
      
      <guid>http://colin.detwiller.me/post/javascript-more-string-exercises/</guid>
      <description>Next up on our list of exercises is going to be two more simple functions.
First we&amp;rsquo;ll walk through how to implement a palindrome checker, and then we&amp;rsquo;ll cover reversing integers.
For the palindrome function, we&amp;rsquo;ll want to return true/false depending on whether or not a given string is a palindrome. For those of you who are not familiar with the term here is the definition:
a word, phrase, or sequence that reads the same backward as forward</description>
    </item>
    
    <item>
      <title>Javascript Reverse String</title>
      <link>http://colin.detwiller.me/post/javascript-reverse-string/</link>
      <pubDate>Sat, 03 Feb 2018 10:03:12 -0500</pubDate>
      
      <guid>http://colin.detwiller.me/post/javascript-reverse-string/</guid>
      <description>In an effort to learn the in&amp;rsquo;s and out&amp;rsquo;s of ES2017 I&amp;rsquo;m going to be working through some exercises.
The first exercise I&amp;rsquo;d like to work through is a pretty simple one, reversing a string with javascript.
Basically, given string &#39;foobar&#39; I&amp;rsquo;d like to return &#39;raboof&#39; - again, this is pretty simple and I think it would be a great place to start.
To start with, let&amp;rsquo;s go ahead and create a new directory in our terminal with:</description>
    </item>
    
    <item>
      <title>Azure Application Gateway - Part 2</title>
      <link>http://colin.detwiller.me/post/azureapplicationgatwaypart2/</link>
      <pubDate>Mon, 29 Jan 2018 10:43:42 -0500</pubDate>
      
      <guid>http://colin.detwiller.me/post/azureapplicationgatwaypart2/</guid>
      <description>This is a continuation from part one on setting up an Azure Application Gateway Part 1.
Next on our hit list is creating an Azure VNet to hold our AppGW. The AppGW has to live in an AppGW subnet, the only other thing that can reside in the same subnet are other AppGW&amp;rsquo;s and hopefully you&amp;rsquo;ll only need one since the AppGW is capable of serving up to 20 sites, with various limits around authentication certs for backend re-encryption.</description>
    </item>
    
    <item>
      <title>Azure Application Gateway - Part 1</title>
      <link>http://colin.detwiller.me/post/azureapplicationgatwaypart1/</link>
      <pubDate>Mon, 29 Jan 2018 10:43:38 -0500</pubDate>
      
      <guid>http://colin.detwiller.me/post/azureapplicationgatwaypart1/</guid>
      <description>This is going to be a chronicling of how to setup an Azure Application Gateway using a custom wildcard certificate (You should be thinking &amp;ldquo;*.foobar.com&amp;rdquo;).
The Background I&amp;rsquo;ve gone through some basic tutorials with the Azure Application Gateway (AppGW) in the past, but recently I encountered a scenario where a client needed me to setup an AppGW that could host 4 Azure Web Apps running an an Azure App Service Environment.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://colin.detwiller.me/about/</link>
      <pubDate>Mon, 29 Jan 2018 07:42:10 -0500</pubDate>
      
      <guid>http://colin.detwiller.me/about/</guid>
      <description>My name is Colin Detwiller.
I&amp;rsquo;m a passionate technologist and have been learning everything I can around software craftsmanship, cloud platforms, distributed systems, infrastructure/ops automation, and many more topics.
If any of these topics sound interesting to you than you&amp;rsquo;ve found the right place to come learn from all my mistakes.</description>
    </item>
    
  </channel>
</rss>